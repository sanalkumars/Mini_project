<%- include("../partials/layouts.ejs") %>
<style>
    /* Custom CSS to change the background color of input fields */
    .form-control {
        background-color: lightblue;
    }
</style>
<link rel="stylesheet" href="/cropperjs/cropper.css">
    <script src="/cropperjs/cropper.js"></script>
<body>
    <div class="container-fluid position-relative d-flex p-0">
        <!-- Sidebar Start -->
        <%- include("../partials/adminHeader.ejs") %>
        <!-- Sidebar End -->


        <!-- Content Start -->
        <div class="content">
            <!-- Navbar Start -->
            <%- include("../partials/adminNavbar.ejs") %>
            <!-- Navbar End -->


            
            <div class="container" style="background-color: antiquewhite;">
                <h1 style="text-align: center; color: rgb(17, 13, 13);">Edit Product</h1>
                <div class="d-flex justify-content-center mt-5 " style="min-height: 100vh;">
                    <div>
                        
                        <form id="productForm" action="/admin/editproducts/<%= product.id %>" method="post" enctype="multipart/form-data" class="needs-validation" novalidate onsubmit="return validateForm();">
                            
                            <input type="hidden" id="croppedImageData" name="croppedImageData" value="">
                            <!-- Add your form content here -->
                            <div class="form-group">
                                <label for="name">Product Name:</label>
                                <input type="text" id="name" name="name" value="<%= product.name %>" class="form-control" required>
                            </div>
                            <div class="form-group">
                                <label for="category">Category:</label>
                                <select id="category" name="category" class="form-control" required>
                                    <option value="Equipments" <%= product.category === 'Equipments' ? 'selected' : '' %>>Equipments</option>
                                    <option value="Clothing" <%= product.category === 'Clothing' ? 'selected' : '' %>>Clothing</option>
                                    <option value="Supplements" <%= product.category === 'Supplements' ? 'selected' : '' %>>Supplements</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="description">Description:</label>
                                <textarea id="description" name="description" rows="6" cols="40" class="form-control" required><%= product.description %></textarea>
                            </div>
                            <div class="form-group">
                                <label for="status">Status:</label>
                                <input type="text" id="status" name="status" value="<%= product.status %>" class="form-control" required>
                            </div>
                            <div class="form-group">
                                <label for="price">Price:</label>
                                <input type="number" id="price" name="price" value="<%= product.price %>" class="form-control" required>
                            </div>

                            <div class="form-group">
                                <label for="quantity">Quantity:</label>
                                <input type="number" id="quantity" name="quantity" value="<%= product.quantity <= 0 ? 0 : product.quantity %>" class="form-control" required>
                            </div>
                            
                            
                            <div class="form-group">
                                <label for="image">Product Image:</label>
                                <input type="file" id="image" name="image" accept="image/*" class="form-control-file">
                                


                                <div class="img-container">
                                    <img id="imagex" src="/uploads/<%= product.image%>" style="max-height: 100px;">
                                </div>

                                <button id="btn-crop">crop</button>
                                            <div class="cropped-container">
                                                <img src="" id="output">
                                           </div>
                                 <br><br>


                                <button type="button" class="btn btn-danger" onclick="confirmDeleteImage(this)">Delete Image</button>
                            </div>
                            
                            <div class="additional-images">
                                <label for="additionalimages">Additional Images:</label>
                                <input type="file" id="additionalimages" name="additionalimages" accept="image/*" multiple required><br>
                                <% for (let i = 0; i < product.additionalimages.length; i++) { %>
                                    <div>
                                        <img width="70" height="70" class="rounded-2 mr-2" style="max-height: 100px;" src="/uploads/<%= product.additionalimages[i] %>" alt="<%= product.name %>">
                                        <button type="button" class="btn btn-danger" onclick="confirmDeleteImage(this)">Delete Image</button>
                                    </div>
                                <% } %>
                            </div>
                            <br>
                            <div class="mb-3">
                                <label for="offer" class="form-label">Product Offer  </label>
                                <input type="number" id="offer" name="offer" class="form-control" value="<%= product.offer%>" min="0" max="100">
                            </div>
                            <br>
                            <button type="submit" class="btn btn-primary">Update Product</button>
                        </form>
                    </div>
                </div>
               
            </div>
        
            <!-- Footer Start -->
            <%- include("../partials/adminfooter.ejs") %>
            <!-- Footer End -->
        </div>
        <!-- Content End -->


        <!-- Back to Top -->
        <a href="#" class="btn btn-lg btn-primary btn-lg-square back-to-top"><i class="bi bi-arrow-up"></i></a>
    </div>

<!--script form form validation is -->

<script>
    document.addEventListener('DOMContentLoaded', function () {
      const form = document.getElementById('productForm');
  
      form.addEventListener('submit', function (event) {
        if (!validateForm()) {
          event.preventDefault();
        }
      });
  
      function validateForm() {
        let isValid = true;
  
        // Validate Product Name
        const name = document.getElementById('name').value;
        if (name.trim() === '') {
          alert('Please enter a valid Product Name.');
          isValid = false;
        }
  
        // Validate Category
        const category = document.getElementById('category').value;
        if (category.trim() === '') {
          alert('Please select a valid Category.');
          isValid = false;
        }
  
        // Validate Description
        const description = document.getElementById('description').value;
        if (description.trim() === '') {
          alert('Please fill this field.');
          isValid = false;
        }
  
        // Validate Status
        const status = document.getElementById('status').value;
        if (status.trim() === '') {
          alert('Please enter a valid Status.');
          isValid = false;
        }
  
        // Validate Price
        const price = parseFloat(document.getElementById('price').value);
        if (isNaN(price) || price < 0) {
          alert('Please enter a valid number for Price.');
          isValid = false;
        }
  
        // Validate Quantity
        const quantity = parseInt(document.getElementById('quantity').value, 10);
        if (isNaN(quantity) || quantity < 0) {
          alert('Please enter a valid  Quantity.');
          isValid = false;
        }
  
        // Validate Offer
        const offer = parseInt(document.getElementById('offer').value, 10);
        if (isNaN(offer) || offer < 0 || offer > 100) {
          alert('Please enter a valid Offer percentage ');
          isValid = false;
        }
  
        // Add additional validations as needed
  
        return isValid;
      }
    });
  </script>
  


<!--script form form validation is -->

  <script>
    function confirmDeleteImage(button) {
        // Confirm deletion with a dialog
        if (confirm("Are you sure you want to delete this image?")) {
            deleteImage(button);
        }
    }

    function deleteImage(button) {
        // Get the parent div of the image
        var parentDiv = button.parentNode;

        // Find the image within the parent div
        var image = parentDiv.querySelector('img');

        // Hide the image
        image.style.display = 'none';

        // Hide the button
        button.style.display = 'none';

        // You can also clear the file input value if needed
        var fileInput = parentDiv.querySelector('input[type="file"]');
        fileInput.value = '';
    }
</script>
<script>
    let croppedImageData; // Variable to store the cropped image data
    let cropper; // Variable to store the Cropper instance

    // Function to handle the change event of the file input
    function handleImageChange(input) {
        if (input.files && input.files[0]) {
            const reader = new FileReader();

            reader.onload = function (e) {
                // Set the source of the image and initialize the Cropper
                document.getElementById('imagex').src = e.target.result;

                // Initialize Cropper with aspectRatio
                cropper = new Cropper(document.getElementById('imagex'), {
                    aspectRatio: 1,
                });

                // Display the image in the img-container
                document.querySelector('.img-container').style.display = 'block';
                document.querySelector(".cropped-container").style.display = 'none'; // Hide the cropped container
            };

            reader.readAsDataURL(input.files[0]);
        }
    }

    document.getElementById('image').addEventListener('change', function () {
        // Call the handleImageChange function when the file input changes
        handleImageChange(this);
    });

    document.querySelector('#btn-crop').addEventListener('click', function (e) {
        e.preventDefault(); // Prevent the default form submission behavior

        // Check if Cropper instance exists
        if (cropper) {
            // Get the cropped canvas and store the cropped image data
            croppedImageData = cropper.getCroppedCanvas().toDataURL("image/png");

            // Create a new image element for the cropped image
            const croppedImage = new Image();
            croppedImage.src = croppedImageData;
            croppedImage.style.maxWidth = "100px"; // Set the maximum width
            croppedImage.style.maxHeight = "100px"; // Set the maximum height

            // Update the img-container with the cropped image
            document.querySelector('.img-container').innerHTML = ''; // Clear existing content
            document.querySelector('.img-container').appendChild(croppedImage);
            document.querySelector('.img-container').style.display = 'block';
            document.querySelector(".cropped-container").style.display = 'none'; // Hide the cropped container
        }
    });

    document.getElementById('btn-update-product').addEventListener('click', function (e) {
        // Prevent the default form submission behavior
        e.preventDefault();

        // Check if Cropper instance exists
        if (cropper) {
            // Decide whether to use the original image or the cropped image data
            const imageDataToSend = croppedImageData || document.getElementById('imagex').src;

            // Use imageDataToSend for further processing or submission
            // Example: Submit imageDataToSend to the backend for storage

            // Simulate form submission (adjust this based on your needs)
            alert('Product Updated Successfully!\nImageData: ' + imageDataToSend);
        }
    });
</script>

<!-- ... your existing HTML code ... -->
<!-- <script>
    function confirmDeleteImage(button) {
        if (confirm("Are you sure you want to delete this image?")) {
            deleteImage(button);
        }
    }

    function deleteImage(button) {
        var parentDiv = button.parentNode;
        var image = parentDiv.querySelector('img');
        image.style.display = 'none';
        button.style.display = 'none';
        var fileInput = parentDiv.querySelector('input[type="file"]');
        fileInput.value = '';
    }

    let croppedImageData;
    let cropper;

    function handleImageChange(input) {
        if (input.files && input.files[0]) {
            const reader = new FileReader();

            reader.onload = function (e) {
                document.getElementById('imagex').src = e.target.result;
                cropper = new Cropper(document.getElementById('imagex'), {
                    aspectRatio: 1,
                });
                document.querySelector('.img-container').style.display = 'block';
                document.querySelector(".cropped-container").style.display = 'none';
            };

            reader.readAsDataURL(input.files[0]);
        }
    }

    document.getElementById('image').addEventListener('change', function () {
        handleImageChange(this);
    });

    document.querySelector('#btn-crop').addEventListener('click', function (e) {
        e.preventDefault();

        if (cropper) {
            croppedImageData = cropper.getCroppedCanvas().toDataURL("image/png");
            const croppedImage = new Image();
            croppedImage.src = croppedImageData;
            croppedImage.style.maxWidth = "100px";
            croppedImage.style.maxHeight = "100px";
            document.querySelector('.img-container').innerHTML = '';
            document.querySelector('.img-container').appendChild(croppedImage);
            document.querySelector('.img-container').style.display = 'block';
            document.querySelector(".cropped-container").style.display = 'none';
        }
    });

    document.getElementById('btn-update-product').addEventListener('click', async function (e) {
        e.preventDefault();

        if (cropper) {
            croppedImageData = cropper.getCroppedCanvas().toDataURL("image/png");
            document.querySelector('.img-container').innerHTML = '';
            const croppedImage = new Image();
            croppedImage.src = croppedImageData;
            croppedImage.style.maxWidth = "100px";
            croppedImage.style.maxHeight = "100px";
            document.querySelector('.img-container').appendChild(croppedImage);
            document.querySelector('.img-container').style.display = 'block';
            document.querySelector(".cropped-container").style.display = 'none';

            try {
                const formData = new FormData(document.querySelector('#productForm'));
                formData.append("image", )
                const response = await fetch("/admin/editproducts/<%= product.id %>", {
                    method: "POST",
                    body: formData
                    // headers: {
                    //     'Content-Type': 'application/json', // Set content type to JSON
                    // },
                    // body: JSON.stringify({
                    //     name: document.getElementById('name').value,
                    //     category: document.getElementById('category').value,
                    //     description: document.getElementById('description').value,
                    //     status: document.getElementById('status').value,
                    //     price: document.getElementById('price').value,
                    //     // Add other fields as needed
                    //     croppedImageData: croppedImageData,
                    // }),
                });

                if (response.ok) {
                    alert('Product Updated Successfully!');
                    // Redirect or perform other actions as needed
                } else {
                    alert('Failed to update product. Please try again.');
                }
            } catch (error) {
                console.error(error);
                alert('An error occurred while updating the product.');
            }
        }
    });
</script>

 -->




